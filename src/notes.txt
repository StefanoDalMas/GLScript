belief set:
    come viene popolato?
    - pusho nel belief set tutti i pacchetti che vedo che non sono presi su
belife revision(solo info su pacchetti per ora):
    - prendo dalle opzioni totali quella migliore in base a:
        + TODO (punteggio, distanza[aerea, manattan, astar?])
    - pusho/faccio l'intenzione che ho deciso essere migliore

while(1)
intention set:
    In questa dobbiamo capire quali intenzioni pushre nel set.
    - pusho put down quando ... TODO (tipo num pacchetti e valore)
    - pusho random move quando non ho altri obiettivi da fare
intention revision: (idealmente non conti pesanti)
    - leggo l'intenzione e valuto se è ancora fattibile
        + pick up: guardo se c'è ancora e se ha ancora un valore interessante (magari logica con time-stamp -> pushare nella coda di intenzioni anche quando è stata pushata)
        + put down: no controlli
        + go to: no controlli, ma non lo pushamo mai. Lo usiamo solo come subIntention
        + random move: no controllo

intentions implementations:
    + pick up: prova a prendere il pacchetto che c'è scritto nell'intenzione. Se si blocca, l'intenzione finisce.
    + put down: provo ad andare nel punto di consegna. Se mi blocco, vado in un'altro punto di consegna (in base a qualche distanza). Se non riesco neanche li, finisce senza buttar giu.
    + go to: vado dove mi viene detto prendendo su i pacchi per strada e buttando giù se passo per un punto di consegna
    + random move: sceglie tile camminabile a distanza 1 e ci va (con astar ma l'è stesso)

TODO NOW
- Comunicazione :
    - iniziare con handshake(A shout "ally?"+ payload e B risponde con il suo)
        - agente A fa shout {"AllyGLS?", agent.id}
        - agente B ha la onMessage per agente A, se legge topic == "Ally?" allora capisce che è il toso e gli passa il token
    
    - onParcel/Agent Sensing inviarsi i dati ed aggiornarli
    - capire che fare con i dati / inventarsi logica utilizzando Master - Slave concept
        - master chiede allo slave quanto punteggio prenderebbe a prendere un pacco se è comune e si decide così
    Strategie "anti-agent":
        - brute force agli altri agenti(?) + 1 esame
        - slave fa blocking se non ha niente da fare(?)
    
    
- Refactor : 
    - Global dovrà diventare BeliefSet
    - Tutte le cose che vengono utilizzate come parametri diventeranno un'altra classe tipo Params o Config o qualcosa del genere
    - Mettere le Callback come file singoli(?)


fine

belief set -> dove sono i pacchetti che ho visto
astar percorso che è sequenza di posizioni



